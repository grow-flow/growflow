import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Box,
  Typography,
  Autocomplete,
  ListItem,
  ListItemText
} from '@mui/material';
import { useStrains, useCreateStrain } from '../hooks/useStrains';
import { usePlants } from '../hooks/usePlants';
import { Plant } from '../types/models';
import { Strain, StartMethod, composePhaseTemplates } from '../types/strain';

interface CreatePlantDialogProps {
  open: boolean;
  onClose: () => void;
  onSuccess: (plantData: Partial<Plant>) => Promise<void>;
}

const CreatePlantDialog: React.FC<CreatePlantDialogProps> = ({
  open,
  onClose,
  onSuccess
}) => {
  const { data: strains = [] } = useStrains();
  const { data: plants = [] } = usePlants();
  const createStrainMutation = useCreateStrain();
  
  const [formData, setFormData] = useState({
    strain_id: null as number | null,
    medium: 'soil' as 'soil' | 'hydro' | 'coco' | 'dwc',
    start_method: 'seed' as StartMethod
  });
  
  const [newStrainName, setNewStrainName] = useState('');
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      let strainId = formData.strain_id;
      
      if (newStrainName && !strainId) {
        const newStrain = await createStrainMutation.mutateAsync({
          name: newStrainName,
          type: 'photoperiod',
          is_autoflower: false,
          flowering_time_min: 56,
          flowering_time_max: 70,
          phase_templates: []
        });
        strainId = newStrain.id;
      }

      const strain = strains.find(s => s.id === strainId);
      const phases = composePhaseTemplates(
        strain?.is_autoflower ? 'autoflower' : 'photoperiod',
        formData.start_method,
        strain?.phase_templates
      );

      const finalName = strain?.name || newStrainName;
      const autoGeneratedName = generatePlantName(strain || null, finalName);
      
      const plantData: Partial<Plant> = {
        name: autoGeneratedName,
        strain: strain?.name || newStrainName,
        start_method: formData.start_method,
        plant_type: strain?.is_autoflower ? 'autoflower' : 'photoperiod',
        medium: formData.medium,
        pot_size_liters: 11,
        training_methods: [],
        notes: '',
        phases: phases.map((template, index) => ({
          id: `phase-${index}`,
          name: template.name,
          duration_min: template.duration_min,
          duration_max: template.duration_max,
          description: template.description,
          is_active: index === 0,
          is_completed: false,
          start_date: index === 0 ? new Date().toISOString() : undefined
        })),
        events: [],
        is_active: true
      };

      console.log('Creating plant with data:', JSON.stringify(plantData, null, 2));
      await onSuccess(plantData);
      
      setFormData({
        strain_id: null,
        medium: 'soil',
        start_method: 'seed'
      });
      setNewStrainName('');
    } catch (error) {
      console.error('Failed to create plant:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setFormData({
      strain_id: null,
      medium: 'soil',
      start_method: 'seed'
    });
    setNewStrainName('');
    onClose();
  };

  const generatePlantName = (strain: Strain | null, strainName: string) => {
    const abbreviation = strain?.abbreviation || strainName.substring(0, 3).toUpperCase();
    const existingPlants = plants.filter(p => p.name.startsWith(abbreviation));
    const nextNumber = existingPlants.length + 1;
    return `${abbreviation}-${nextNumber.toString().padStart(2, '0')}`;
  };

  const handleStrainChange = (_: any, newValue: string | Strain | null) => {
    if (newValue && typeof newValue !== 'string') {
      setFormData({ ...formData, strain_id: newValue.id });
      setNewStrainName('');
    } else {
      setFormData({ ...formData, strain_id: null });
    }
  };

  const handleNewStrainInputChange = (_: any, newInputValue: string) => {
    setNewStrainName(newInputValue);
    if (newInputValue && !strains.find(s => s.name.toLowerCase() === newInputValue.toLowerCase())) {
      setFormData({ ...formData, strain_id: null });
    }
  };

  return (
    <Dialog open={open} onClose={handleClose} maxWidth="md" fullWidth>
      <DialogTitle>Add New Plant</DialogTitle>
      <form onSubmit={handleSubmit}>
        <DialogContent>
          <Grid container spacing={3}>
            <Grid item xs={12} md={6}>
              <Autocomplete
                options={strains}
                getOptionLabel={(option) => typeof option === 'string' ? option : option.name}
                value={strains.find(s => s.id === formData.strain_id) || null}
                onChange={handleStrainChange}
                onInputChange={handleNewStrainInputChange}
                freeSolo
                renderInput={(params) => (
                  <TextField
                    {...params}
                    label="Strain"
                    required
                    helperText="Select existing strain or create new one"
                  />
                )}
                renderOption={(props, option) => (
                  <ListItem {...props}>
                    <ListItemText
                      primary={option.name}
                      secondary={`${option.type} â€¢ ${option.flowering_time_min}-${option.flowering_time_max} days`}
                    />
                  </ListItem>
                )}
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <FormControl fullWidth>
                <InputLabel>Start Method</InputLabel>
                <Select
                  value={formData.start_method}
                  label="Start Method"
                  onChange={(e) => setFormData({ ...formData, start_method: e.target.value as StartMethod })}
                >
                  <MenuItem value="seed">Seed</MenuItem>
                  <MenuItem value="clone">Clone</MenuItem>
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={12} md={6}>
              <FormControl fullWidth>
                <InputLabel>Growing Medium</InputLabel>
                <Select
                  value={formData.medium}
                  label="Growing Medium"
                  onChange={(e) => setFormData({ ...formData, medium: e.target.value as any })}
                >
                  <MenuItem value="soil">Soil</MenuItem>
                  <MenuItem value="coco">Coco Coir</MenuItem>
                  <MenuItem value="hydro">Hydroponic</MenuItem>
                  <MenuItem value="dwc">DWC</MenuItem>
                </Select>
              </FormControl>
            </Grid>
          </Grid>

          {newStrainName && !strains.find(s => s.name.toLowerCase() === newStrainName.toLowerCase()) && (
            <Box sx={{ mt: 2, p: 2, bgcolor: 'info.light', borderRadius: 1 }}>
              <Typography variant="body2" color="info.contrastText">
                Creating new strain: <strong>{newStrainName}</strong>
              </Typography>
            </Box>
          )}
        </DialogContent>

        <DialogActions>
          <Button onClick={handleClose}>Cancel</Button>
          <Button type="submit" variant="contained" disabled={loading}>
            {loading ? 'Creating...' : 'Add Plant'}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};

export default CreatePlantDialog;